"""
Example code with model 3, adapt parameters for other models
This code plot results for all pairs of the parameters explored in simulations
"""

from dataclasses import dataclass, field
import numpy as np
import matplotlib.pyplot as plt
import pickle
from datetime import datetime


######## ARGUMENTS ########

@dataclass
class Args:
    model_id: int = 3
    """current model (either 1, 2, 3 or 4)"""
    file_name: str = 'resultsm3_aget_short.pkl'
    """path for results to load"""
    step: float = 0.2
    """resolution of simulation grid"""
    label_to_key_index: dict = field(default_factory=lambda: {'alpha': 0, 'gamma': 1, 'epsilon': 2, 'T_dH': 3})
    """order of each parameter in the dict key"""
    result_index: int = 1 
    """results to plot"""
    result_label: str = "Average stock levels (final state)"  
    """"0: Average effort levels, 1: Average stock levels, 2: Average harvest"""
    interpolation: str = 'none'
    """either spline16 or none"""


######## MAIN FUNCTION ########

def plot_results(fixed_labels, fixed_values, var_labels, results_dict, args, save_plot=True):
    
    assert len(fixed_labels) == len(fixed_values) # can be 0 or more
    assert len(var_labels) == 2 
    assert isinstance(fixed_values, list)
    
    # Get indices
    var1_idx = args.label_to_key_index[var_labels[0]]
    var2_idx = args.label_to_key_index[var_labels[1]]
    fixed_idcs = [args.label_to_key_index[label] for label in fixed_labels]  # Adjusted for multiple labels
    
    # Collect data
    variable_data = [
        (params[var1_idx], params[var2_idx], results[args.result_index])
        for params, results in results_dict.items()
        if all(params[idx] == val for idx, val in zip(fixed_idcs, fixed_values))
    ]
    
    var1_set = sorted(set(item[0] for item in variable_data))
    var2_set = sorted(set(item[1] for item in variable_data))
    results = np.array([item[2] for item in variable_data]).reshape(len(var1_set), len(var2_set))

    # Create the plot
    plt.figure(figsize=(8, 6))
    plt.imshow(results, extent=[min(var2_set), max(var2_set), min(var1_set), max(var1_set)], interpolation=args.interpolation, origin='lower', aspect='auto')
    plt.colorbar(label=args.result_label)
    plt.xlabel(var_labels[1])
    plt.ylabel(var_labels[0])
    
    if len(fixed_labels) > 0:
        title_str = "Results for " + ", ".join(
            f"{label}={value}" for label, value in zip(fixed_labels, fixed_values)
        )
        plt.title(title_str)
    
    if save_plot:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        plt.savefig(f'plot_m{args.model_id}_{var_labels[1][0]}{var_labels[0][0]}_r{str(args.result_index)}_{timestamp}.eps', format='eps')
        plt.savefig(f'plot_m{args.model_id}_{var_labels[1][0]}{var_labels[0][0]}_r{str(args.result_index)}_{timestamp}.png', format='png')

    plt.show()


######## MAIN CODE ########

if __name__ == "__main__":
    args = Args()
    
    
    ###### Recreate values (or load in case values were saved) ######
    
    # Grid resolution
    step_scale1 = args.step
    step_scale10 = args.step * 10
    
    # Values
    alpha_values = np.arange(0, 1 + step_scale1, step_scale1, dtype=float)
    gamma_values = [0.99] # gamma fixed
    epsilon_values = np.arange(0, 1 + step_scale1, step_scale1, dtype=float)
    TdH_values = np.arange(0.0, 10 + step_scale10, step_scale10, dtype=float)
    
    # Non-zeros
    epsilon = 0.01
    alpha_values[0] += epsilon
    epsilon_values[0] += epsilon
    TdH_values[0] += epsilon
    
    
    
    ###### Load the results ######
    with open(args.file_name, mode='rb') as file:
        results_dict = pickle.load(file)  
    
    
    
    ###### Plot results for all pairs ######
    
    # Plot with T fixed
    fixed_TdH = TdH_values[1]
    plot_results(['gamma', 'T_dH'], [gamma_values[0], fixed_TdH], ['alpha', 'epsilon'], results_dict, args)
    print("First plot done")
    
    # Plot with epsilon fixed
    fixed_epsilon = epsilon_values[1]
    plot_results(['gamma', 'epsilon'], [gamma_values[0], fixed_epsilon], ['alpha', 'T_dH'], results_dict, args)
    print("Second plot done")
    
    # Plot with alpha fixed
    fixed_alpha = alpha_values[1]
    plot_results(['gamma', 'alpha'], [gamma_values[0], fixed_alpha], ['epsilon', 'T_dH'], results_dict, args)
    print("Last plot done")
