"""
Example code with model 1, adapt parameters for other models
Plot results for paired parameters explored in simulations
"""

import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import pickle


######## PARAMETERS ########

class Args:
    model_id: int = 1 
    """current model (either 1, 2, 3 or 4)"""

    # Parameters to explore (default settings)
    rationality: float = 1.0
    """learning rate (can be zero)"""
    update_timescale: float = 1.0
    """discount factor (should not be zero)"""
    
    # Simulation parameters
    num_simulations: int = 50
    """number of simulation per datapoints, to get average results"""
    update_timescale_values: np.ndarray = np.array([0.01, 0.1, 0.2, 0.5, 0.8, 1, 2, 3, 5, 10])
    """explored tau values"""
    rationality_values: np.ndarray = np.array([0.0, 0.1, 0.2, 0.5, 0.8, 1, 2, 3, 5, 10])
    """explored r values""" 
    
    # Results information
    file_name: str = 'resultsm1_taur.pkl'
    """name of results to load"""
    key_names: list = ['Update timescale', 'Rationality']
    """name of key tuple components"""
    result_names: list = ['Fraction of consensus', 'Fraction of sustainable states', 'Average end time']
    """name of value array components"""
    
    # Plot features
    interpolation: str = 'spline16'
    """interpolation feature, usually either spline16 or none"""
    result_type: int = 1
    """results we are willing to plot out of all components, see result_names"""
    image_aspect: str = 'equal'
    """aspect of the image, usually either equal or auto"""
    

######## PLOT FUNCTION ########

def plot_results(results_dict, variable_parameters, fixed_parameters, args, save_plot=True):
    
    num_var = len(variable_parameters)
    num_fix = len(fixed_parameters)
    
    assert num_var == 2, 'Dimensions do not match (only 2D)'
    assert num_var + num_fix == len(args.key_names)
    assert isinstance(variable_parameters, list), "variable_data is not a list"
    assert isinstance(fixed_parameters, list), "fixed_data is not a list"
    
    # Sort with desired order key_names
    full_data = variable_parameters + fixed_parameters
    def sort_key(data_dict):
        return args.key_names.index(data_dict['name'])
    sorted_data = sorted(full_data, key=sort_key)
    
    # Retrieve position of (x,y)
    position_x = sorted_data.index(full_data[0])
    position_y = sorted_data.index(full_data[1])
    
    # Check
    assert sorted_data[position_x] == variable_parameters[0]
    assert sorted_data[position_y] == variable_parameters[1]
    
    x_values = variable_parameters[0]['value']
    y_values = variable_parameters[1]['value']
    
    results_to_plot = np.zeros((len(x_values), len(y_values)))
    for i in range(len(x_values)):
        for j in range(len(y_values)):
            
            curent_key = []
            for idx, item in enumerate(sorted_data):
                value = item['value']
                if idx == position_x:
                    curent_key.append(value[i])
                elif idx == position_y:
                    curent_key.append(value[j])
                else:
                    curent_key.append(value)
            curent_key = tuple(curent_key)
            
            # Get the values for current data point (x,y)
            if curent_key in results_dict:
                results_to_plot[i, j] = results_dict[curent_key][args.result_type]
            else:
                raise ValueError('Wrong key')

    # Plot
    plt.imshow(results_to_plot, interpolation=args.interpolation, extent=[0, x_values.max(), 0, y_values.max()],
              aspect=args.image_aspect, origin='lower', cmap='viridis')
    plt.colorbar(label=args.result_names[args.result_type])
    plt.xlabel(variable_parameters[0]['name'])
    plt.ylabel(variable_parameters[1]['name'])
    
    if num_fix > 0:
        title_parts = [f"{item['name']} = {item['value']}" for item in fixed_parameters]
        full_title = "Results for " + ", ".join(title_parts)
        plt.title(full_title)
    
    if save_plot:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        plt.savefig(f'plot_m{str(args.model_id)}_{timestamp}.eps', format='eps')
        plt.savefig(f'plot_m1_{timestamp}.png', format='png')
    
    plt.show()


######## MAIN CODE ########

if __name__ == "__main__":
    args = Args()
    
    # Load the results
    with open(args.file_name, mode='rb') as file:
        results_dict = pickle.load(file)    
    
    # Split in variable and fixed parameters
    variable_parameters: list = [
        {'name': 'Update timescale', 'value': args.update_timescale_values},
        {'name': 'Rationality', 'value': args.rationality_values}
    ]
    fixed_parameters = []
    
    # Plot
    plot_results(results_dict, variable_parameters, fixed_parameters, args)
