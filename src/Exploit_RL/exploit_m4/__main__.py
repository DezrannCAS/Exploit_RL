import numpy as np
import torch
import matplotlib.pyplot as plt
import random
from .config import Args
from .core import ResourcePool, ReplayBuffer, Network, Agent, MultiAgentTrainer

def set_seed(seed, device, torch_deterministic=True):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    
    if device.type == "cuda":
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)  # for multi-GPU setups
        torch.backends.cudnn.deterministic = torch_deterministic
        torch.backends.cudnn.benchmark = not torch_deterministic
    
    if device.type == "xpu":
        torch.xpu.manual_seed(seed)
        torch.xpu.manual_seed_all(seed)  # for multi-GPU setups
    
    if torch_deterministic:
        torch.use_deterministic_algorithms(True)

if __name__ == "__main__":
    args = Args()
    set_seed(1, args.device)

    shared_pool = ResourcePool(args.s0_case, args.max_stock, args.growth_rate, args.num_steps, args.dt)

    population = [
        Agent(
            Network(args.device),
            ReplayBuffer(args.num_minibatches, args.len_trajectories),
            args.learning_rate,
            args.gamma,
            args.gae_lambda,
            args.clip_coef,
            args.c_val, args.c_aux, args.c_ent
        )
        for _ in range(args.num_agents)
    ]

    trainer = MultiAgentTrainer(shared_pool, population, args.num_iterations, args.num_episodes, args.num_epochs)

    loss_dict = trainer.train()

    #### Plot losses ####

    fig, axs = plt.subplots(len(loss_dict), 1, figsize=(10, 15))
    colors = ['b', 'g', 'r', 'c', 'm']

    for i, (label, loss) in enumerate(loss_dict.items()):
        formatted_label = label.replace('_', ' ').title()
        axs[i].plot(loss, label=formatted_label, color=colors[i])
        axs[i].set_title(formatted_label)
        axs[i].set_xlabel('Iterations')
        axs[i].set_ylabel('Loss')
        axs[i].legend()

    plt.tight_layout()
    plt.show()

    #### Test ####

    trainer.test()

    for agent in population:
        agent.sketch_policy_profile(20)