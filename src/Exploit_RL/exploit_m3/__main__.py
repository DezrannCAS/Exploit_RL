import time
import pickle
from itertools import product
from multiprocessing import cpu_count
import numpy as np
from .config import FixedArgs, FreeArgs
from .core import MultiAgentTrainer
from .. import parallel_simulations

if __name__ == "__main__":
    args = FixedArgs()
    free_params = FreeArgs()
    seed = 12345

    # Grid resolution
    step_scale1 = args.step
    step_scale10 = args.step * 10
    
    # Values
    alpha_values = np.arange(0, 1 + step_scale1, step_scale1, dtype=float)
    #gamma_values = np.arange(0, 1 + step_scale1, step_scale1, dtype=float)
    gamma_values = [args.gamma] # gamma fixed
    epsilon_values = np.arange(0, 1 + step_scale1, step_scale1, dtype=float)
    TdH_values = np.arange(0, 10 + step_scale10, step_scale10, dtype=float)
    
    # Non-zeros
    eps = 0.01
    alpha_values[0] += eps
    epsilon_values[0] += eps
    TdH_values[0] += eps
    
    # Resume
    print('===================================')
    num_params = len(alpha_values) * len(gamma_values) * len(epsilon_values) * len(TdH_values)
    print(f'Number of parameters: {num_params}')
    print(f'Number of simulations: {args.num_simulations}')
    print(f'--- hence {num_params * args.num_simulations} parallel processes')
    print(f'Number of agents: {args.num_agents} (most functions using parallelized loops)')
    print(f'Number of CPU logical processors: {cpu_count()}')
    print('===================================')

    # Simulate for all coordinates
    param_grid = list(product(alpha_values, gamma_values, epsilon_values, TdH_values))

    results = {}
    total_time = 0
    for i, (alpha, gamma, epsilon, T_dH) in enumerate(param_grid):
        progress = (i / num_params) * 100
        print()
        print(f"Running simulations for alpha={alpha}, gamma={gamma}, T_dH={T_dH} ({progress:.2f}% complete)")
        start_single_bsimul = time.time()
        
        # Current parameters
        free_params.alpha = alpha
        free_params.gamma = gamma
        free_params.epsilon = epsilon
        free_params.T_dH = T_dH

        # Run simulations
        params, mean_result = parallel_simulations(seed, free_params, args, MultiAgentTrainer)
        results[params] = mean_result
        
        time_single_bsimul = time.time() - start_single_bsimul
        total_time += time_single_bsimul
        remaining_time = (num_params-i) * total_time / (i+1)
        print(f"---simulation batch completed in {time_single_bsimul:.2f} seconds")
        print(f"---on average {total_time / (i+1):.2f} seconds, expected remaining time: {remaining_time/60:.2f} minutes")

    print()
    print(f"Completed all simulations in {total_time/60:.2f} minutes")

    with open(args.file_name, mode='wb') as file:
        pickle.dump(results, file)
    print('Results saved')