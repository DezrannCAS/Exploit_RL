import numpy as np
from typing import Tuple
from numba import njit
from scipy.sparse.csgraph import connected_components
from .. import MultiAgentSystem


######## JIT FUNCTIONS ########

@njit
def find_update_candidates(update_times: np.ndarray, strategies: np.ndarray, update_timescale: float, adjacency_matrix: np.ndarray) -> Tuple[int, int, float]:
    num_agents = adjacency_matrix.shape[0]
    
    for _ in range(100 * num_agents):
        # Pick the agent with the smallest update time
        agent = np.argmin(update_times)
        update_time = update_times[agent]

        # Next update time for the selected agent
        update_times[agent] += np.random.exponential(update_timescale)

        # Pick a neighbor
        neighbors = np.nonzero(adjacency_matrix[agent])[0]
        neighbor = np.random.choice(neighbors)
        
        if strategies[neighbor] != strategies[agent]:
            return agent, neighbor, update_time

    return -1, -1, 0.0

@njit
def choose_action(harvest_self: float, harvest_neighbor: float, rationality: float) -> int:    
    dH = harvest_neighbor - harvest_self
    imitation_probability = 0.5 * (np.tanh(rationality * dH) + 1)
    if np.random.rand() < imitation_probability:
        return 1 # imitate
    return 0 # not

@njit
def perform_actions(stocks: np.ndarray, strategies: np.ndarray, max_stock: float, growth_rate: float, dt: float) -> Tuple[np.ndarray, np.ndarray]:
    E = growth_rate * 0.5 * (3 - 2 * strategies)
    b = growth_rate - E
    gs0 = growth_rate * stocks
    new_stocks = stocks * max_stock * b / ((max_stock * b - gs0) * np.exp(-b * dt) + gs0)
    return new_stocks, E * new_stocks


######## TRAINER CLASS ########

class MultiAgentExploit(MultiAgentSystem):   
    def initialize(self, fixed_params, free_params):
        # Model parameter and variable
        self.update_timescale = free_params.update_timescale
        self.check_for_consensus()

        # Resource parameters (common)
        self.max_stock = fixed_params.max_stock
        self.growth_rate = fixed_params.growth_rate

        # Resource variable (individual)
        self.stocks = np.ones(self.num_agents)
        
        # Agent parameters
        self.rationality = free_params.rationality # (common)
        self.update_times = np.random.exponential(scale=self.update_timescale, size=self.num_agents) # (individual)

        # Agent Variables (individual)
        self.harvests = np.full(self.num_agents, np.nan)
        self.strategies = np.random.randint(2, size=self.num_agents)

    def reset_episode(self):
        self.current_time = 0
        self.stocks = np.ones(self.num_agents)
        self.harvests = np.full(self.num_agents, np.nan)
        self.strategies = np.random.randint(2, size=self.num_agents)

    def run(self, max_steps=1000000000):
        
        for _ in range(max_steps):
            # Find next agent to update and pick a neighbor
            agent_index, neighbor_index, update_time = find_update_candidates(self.update_times, self.strategies, self.update_timescale, self.adjacency_matrix)
            assert agent_index != -1, 'no update candidates found'
            
            # Step all agents until update_time
            dt = update_time - self.current_time
            self.stocks, self.harvests = perform_actions(self.stocks, self.strategies, self.max_stock, self.growth_rate, dt)
            self.current_time += dt
            
            # Update agent strategy
            harvest_self = self.harvests[agent_index]
            harvest_neighbor = self.harvests[neighbor_index]
            action = choose_action(harvest_self, harvest_neighbor, self.rationality)
            if action:
                self.strategies[agent_index] = self.strategies[neighbor_index]
            
            # Stop if consensus
            if self.check_for_consensus():
                return np.array([1, np.mean(self.strategies), self.current_time]) # consensus, fraction of 1s, end time

        return np.array([0, np.mean(self.strategies), self.current_time]) # consensus, fraction of 1s, end time

    def check_for_consensus(self):
        cc = connected_components(self.adjacency_matrix, directed=False)[1]
        self.consensus = all(len(np.unique(self.strategies[c])) == 1
                             for c in ((cc == i).nonzero()[0]
                             for i in np.unique(cc)))
        return self.consensus
